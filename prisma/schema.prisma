// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id                String    @id @default(cuid())
  title             String
  slug              String    @unique
  shortContent      String?
  longContent       String?
  thumbnail         String    @default("https://res.cloudinary.com/dtm41dmrz/image/upload/v1685400814/tinta-posts/thxal175stlimthovo7t.png")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String?
  user              User[]
  modules           Module[]
}

model Module {
  id                String    @id @default(cuid())
  title             String
  courseId          String
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sections          Section[]
  createdAt         DateTime  @default(now())
}

model Section {
  id                String    @id @default(cuid())
  title             String
  content           String?
  videoUrl          String?
  videoSource       String
  moduleId          String
  module            Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          String    @default("member")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}